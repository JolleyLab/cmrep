#include "PointSetHamiltonianSystem.h"
#include <iostream>
#include <cstdlib>

// Some data imported from MATLAB
double q0x[80] = {
    0.8, 0.7990752, 0.796306502, 0.791710976, 0.785316955, 0.77716386, 0.767301957, 0.755792049
    0.742705098, 0.72812179, 0.712132034, 0.694834414, 0.676335576, 0.656749569, 0.63619715, 0.61480503
    0.592705098, 0.570033609, 0.54693034, 0.523537729, 0.5, 0.476462271, 0.45306966, 0.429966391
    0.407294902, 0.38519497, 0.36380285, 0.343250431, 0.323664424, 0.305165586, 0.287867966, 0.27187821
    0.257294902, 0.244207951, 0.232698043, 0.22283614, 0.214683045, 0.208289024, 0.203693498, 0.2009248
    0.2, 0.2009248, 0.203693498, 0.208289024, 0.214683045, 0.22283614, 0.232698043, 0.244207951
    0.257294902, 0.27187821, 0.287867966, 0.305165586, 0.323664424, 0.343250431, 0.36380285, 0.38519497
    0.407294902, 0.429966391, 0.45306966, 0.476462271, 0.5, 0.523537729, 0.54693034, 0.570033609
    0.592705098, 0.61480503, 0.63619715, 0.656749569, 0.676335576, 0.694834414, 0.712132034, 0.72812179
    0.742705098, 0.755792049, 0.767301957, 0.77716386, 0.785316955, 0.791710976, 0.796306502, 0.7990752};

double q0y[80] = {
    0.3, 0.30784591, 0.315643447, 0.323344536, 0.330901699, 0.338268343, 0.34539905, 0.352249856
    0.358778525, 0.364944805, 0.370710678, 0.376040597, 0.380901699, 0.385264016, 0.389100652, 0.392387953
    0.395105652, 0.397236992, 0.398768834, 0.399691733, 0.4, 0.399691733, 0.398768834, 0.397236992
    0.395105652, 0.392387953, 0.389100652, 0.385264016, 0.380901699, 0.376040597, 0.370710678, 0.364944805
    0.358778525, 0.352249856, 0.34539905, 0.338268343, 0.330901699, 0.323344536, 0.315643447, 0.30784591
    0.3, 0.29215409, 0.284356553, 0.276655464, 0.269098301, 0.261731657, 0.25460095, 0.247750144
    0.241221475, 0.235055195, 0.229289322, 0.223959403, 0.219098301, 0.214735984, 0.210899348, 0.207612047
    0.204894348, 0.202763008, 0.201231166, 0.200308267, 0.2, 0.200308267, 0.201231166, 0.202763008
    0.204894348, 0.207612047, 0.210899348, 0.214735984, 0.219098301, 0.223959403, 0.229289322, 0.235055195
    0.241221475, 0.247750144, 0.25460095, 0.261731657, 0.269098301, 0.276655464, 0.284356553, 0.29215409};

double p0x[80] = {
  -0.000294319352, 0.000278349192, 0.000774966776, 0.00121062054, 0.00126762192, 0.00120462934, 0.00104935399, 0.000788292266
    0.000447096008, 0.000196894031, 1.22370233e-05, -0.000114791091, -0.000189725613, -0.000225435818, -0.000153174379, -9.49439899e-05
    -6.2120972e-05, -4.79922655e-05, -3.36422039e-05, -1.6692997e-05, -4.00390448e-12, 1.66929899e-05, 3.3642197e-05, 4.79922589e-05
    6.21209669e-05, 9.49439846e-05, 0.000153174375, 0.000225435813, 0.000189725609, 0.000114791088, -1.22370262e-05, -0.000196894034
    -0.00044709601, -0.000788292267, -0.00104935399, -0.00120462935, -0.00126762192, -0.00121062054, -0.000774966776, -0.000278349193
    0.000294319351, 0.000889552695, 0.00128349663, 0.00153809125, 0.00163720009, 0.0016466735, 0.0013885544, 0.00093331241
    0.000131496173, -0.0011696853, -0.00306165872, -0.004905018, -0.00494645797, -0.00431532666, -0.00273190391, -0.00133035234
    -0.000676311833, -0.000379632803, -0.000202712207, -8.48491207e-05, -1.43702427e-12, 8.48491202e-05, 0.000202712206, 0.000379632803
    0.000676311831, 0.00133035234, 0.00273190391, 0.00431532666, 0.00494645796, 0.00490501799, 0.00306165871, 0.00116968529
    -0.000131496176, -0.000933312412, -0.0013885544, -0.0016466735, -0.00163720009, -0.00153809125, -0.00128349663, -0.000889552695};

double p0y[80] = {
    -0.000294319352, 0.000278349192, 0.000774966776, 0.00121062054, 0.00126762192, 0.00120462934, 0.00104935399, 0.000788292266
    0.000447096008, 0.000196894031, 1.22370233e-05, -0.000114791091, -0.000189725613, -0.000225435818, -0.000153174379, -9.49439899e-05
    -6.2120972e-05, -4.79922655e-05, -3.36422039e-05, -1.6692997e-05, -4.00390448e-12, 1.66929899e-05, 3.3642197e-05, 4.79922589e-05
    6.21209669e-05, 9.49439846e-05, 0.000153174375, 0.000225435813, 0.000189725609, 0.000114791088, -1.22370262e-05, -0.000196894034
    -0.00044709601, -0.000788292267, -0.00104935399, -0.00120462935, -0.00126762192, -0.00121062054, -0.000774966776, -0.000278349193
    0.000294319351, 0.000889552695, 0.00128349663, 0.00153809125, 0.00163720009, 0.0016466735, 0.0013885544, 0.00093331241
    0.000131496173, -0.0011696853, -0.00306165872, -0.004905018, -0.00494645797, -0.00431532666, -0.00273190391, -0.00133035234
    -0.000676311833, -0.000379632803, -0.000202712207, -8.48491207e-05, -1.43702427e-12, 8.48491202e-05, 0.000202712206, 0.000379632803
    0.000676311831, 0.00133035234, 0.00273190391, 0.00431532666, 0.00494645796, 0.00490501799, 0.00306165871, 0.00116968529
    -0.000131496176, -0.000933312412, -0.0013885544, -0.0016466735, -0.00163720009, -0.00153809125, -0.00128349663, -0.000889552695};

// Expected value from MATLAB experiments
double H_reg = 0.00299435687;

// Expected value from MATLAB experiments
double q1x_reg[80] = {
    0.804288565, 0.803465904, 0.800919023, 0.796634788, 0.790607641, 0.782836734, 0.77332437, 0.762076767
    0.749107966, 0.734447234, 0.71814938, 0.700305985, 0.681053897, 0.660576141, 0.639090937, 0.616828505
    0.594002579, 0.570789024, 0.547320754, 0.523697389, 0.5, 0.476302611, 0.452679246, 0.429210976
    0.405997421, 0.383171495, 0.360909063, 0.339423859, 0.318946103, 0.299694015, 0.28185062, 0.265552766
    0.250892034, 0.237923233, 0.22667563, 0.217163266, 0.209392359, 0.203365212, 0.199080977, 0.196534096
    0.195711435, 0.196589073, 0.19912969, 0.203281497, 0.208979683, 0.2161514, 0.224725078, 0.234644275
    0.245885301, 0.258476535, 0.272515421, 0.288175302, 0.305686619, 0.325268448, 0.346997426, 0.370665663
    0.395761127, 0.421644427, 0.447793156, 0.473929941, 0.5, 0.526070059, 0.552206844, 0.578355573
    0.604238873, 0.629334337, 0.653002574, 0.674731552, 0.694313381, 0.711824698, 0.727484579, 0.741523464
    0.754114699, 0.765355725, 0.775274922, 0.7838486, 0.791020317, 0.796718503, 0.80087031, 0.803410927};

double q1y_reg[80] = {
    0.333037181, 0.339834342, 0.346765318, 0.353703376, 0.360505996, 0.36701931, 0.373084778, 0.37854941
    0.383280616, 0.387185913, 0.390235674, 0.392483277, 0.394072027, 0.395216069, 0.396149521, 0.397056567
    0.398014449, 0.398980632, 0.399829336, 0.400413563, 0.400621921, 0.400413563, 0.399829336, 0.398980632
    0.398014449, 0.397056567, 0.396149521, 0.395216069, 0.394072027, 0.392483277, 0.390235674, 0.387185913
    0.383280616, 0.37854941, 0.373084778, 0.36701931, 0.360505996, 0.353703376, 0.346765318, 0.339834342
    0.333037181, 0.326481124, 0.320249789, 0.314397247, 0.308939955, 0.303846869, 0.299029145, 0.294331916
    0.289531511, 0.284342317, 0.278439522, 0.271508272, 0.263334558, 0.253944579, 0.243748851, 0.233559163
    0.224355932, 0.21691886, 0.211621228, 0.208504149, 0.207481237, 0.208504149, 0.211621228, 0.21691886
    0.224355932, 0.233559163, 0.243748851, 0.253944579, 0.263334558, 0.271508272, 0.278439522, 0.284342317
    0.289531511, 0.294331916, 0.299029145, 0.303846869, 0.308939955, 0.314397247, 0.320249789, 0.326481124};

void test(double val1, double val2, const char *what, int index)
{
  if(fabs(val1 - val2) > 1e-7)
    {
    if(index >= 0)
      std::cerr << "Mismatch in " << what << "[" << index << "] ";
    else
      std::cerr << "Mismatch in " << what << " ";

    std::cerr << val1 << " vs " << val2 << std::endl;
    exit(-1);
    }
}

int main(int argc, char *argv[])
{
  typedef PointSetHamiltonianSystem<double, 2> Ham;
  
  // Initialize the input vectors
  int k = 80;
  Ham::Matrix q0(k, 2), p0(k, 2), q1(k, 2), p1(k, 2);
  for(int i = 0; i < k; i++)
    {
    q0(i,0) = q0x[i]; q0(i,1) = q0y[i];
    p0(i,0) = p0x[i]; p0(i,1) = p0y[i];
    }

  // Create a hamiltonian system
  Ham hsys(q0, 0.08, 100);

  // Flow the system without gradient
  double H = hsys.FlowHamiltonian(p0, q1, p1);

  // Test several positions
  test(H, H_reg, "Hamiltonian", -1);

  for(int i = 0; i < k; i++)
    {
    test(q1(k,1), q1x_reg[k], "Q1_x", k);
    test(q1(k,2), q1y_reg[k], "Q1_y", k);
    }

  return 0;
};
